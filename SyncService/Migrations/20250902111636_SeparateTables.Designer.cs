// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SyncService.EfComponents;

#nullable disable

namespace SyncService.Migrations
{
    [DbContext(typeof(NeoContext))]
    [Migration("20250902111636_SeparateTables")]
    partial class SeparateTables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SyncService.EfComponents.DbSets.DbCloseApproachData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CloseApproachDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("EpochDateCloseApproach")
                        .HasColumnType("bigint");

                    b.Property<double>("MissDistanceKm")
                        .HasColumnType("double precision");

                    b.Property<string>("NearEarthObjectId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OrbitingBody")
                        .HasColumnType("text");

                    b.Property<double>("RelativeVelocityKmh")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.ToTable("CloseApproachData");
                });

            modelBuilder.Entity("SyncService.EfComponents.DbSets.DbNearEarthObject", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<Guid>("CloseApproachDataId")
                        .HasColumnType("uuid");

                    b.Property<double>("EstimatedDiameterMax")
                        .HasColumnType("double precision");

                    b.Property<double>("EstimatedDiameterMin")
                        .HasColumnType("double precision");

                    b.Property<bool>("IsPotentiallyHazardous")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("SyncDateTimesId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SyncDateTimesId");

                    b.ToTable("NearEarthObjects");
                });

            modelBuilder.Entity("SyncService.EfComponents.DbSets.SyncDateTimes", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("SyncTime")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("SyncDateTimes");
                });

            modelBuilder.Entity("SyncService.EfComponents.DbSets.DbNearEarthObject", b =>
                {
                    b.HasOne("SyncService.EfComponents.DbSets.SyncDateTimes", null)
                        .WithMany("NearEarthObjects")
                        .HasForeignKey("SyncDateTimesId");
                });

            modelBuilder.Entity("SyncService.EfComponents.DbSets.SyncDateTimes", b =>
                {
                    b.Navigation("NearEarthObjects");
                });
#pragma warning restore 612, 618
        }
    }
}
